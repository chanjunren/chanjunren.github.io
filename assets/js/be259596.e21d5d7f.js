"use strict";(self.webpackChunkliangzai_for_hire=self.webpackChunkliangzai_for_hire||[]).push([[3396],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var a=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(t),p=i,g=u["".concat(s,".").concat(p)]||u[p]||m[p]||r;return t?a.createElement(g,l(l({ref:n},c),{},{components:t})):a.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2826:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=t(8168),i=(t(6540),t(5680));const r={sidebar_position:3,sidebar_label:"Multi Column Indexes"},l="Multi-Column Indexes",o={unversionedId:"Backend/Database/Relational DB/Indexing/multiColumnIndexes",id:"Backend/Database/Relational DB/Indexing/multiColumnIndexes",title:"Multi-Column Indexes",description:"Index Key Concatenation",source:"@site/docs/Backend/Database/Relational DB/Indexing/multiColumnIndexes.md",sourceDirName:"Backend/Database/Relational DB/Indexing",slug:"/Backend/Database/Relational DB/Indexing/multiColumnIndexes",permalink:"/docs/Backend/Database/Relational DB/Indexing/multiColumnIndexes",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Multi Column Indexes"},sidebar:"docs",previous:{title:"Data Structures",permalink:"/docs/Backend/Database/Relational DB/Indexing/dataStructures"},next:{title:"Domain Driven Design",permalink:"/docs/Backend/Design/ddd"}},s=[{value:"Index Key Concatenation",id:"index-key-concatenation",children:[],level:2},{value:"Sorted Order",id:"sorted-order",children:[],level:2},{value:"Leftmost Principle",id:"leftmost-principle",children:[],level:2},{value:"Range Queries",id:"range-queries",children:[],level:2},{value:"General Guidelines",id:"general-guidelines",children:[],level:2}],d={toc:s},c="wrapper";function u(e){let{components:n,...t}=e;return(0,i.yg)(c,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"multi-column-indexes"},"Multi-Column Indexes"),(0,i.yg)("h2",{id:"index-key-concatenation"},"Index Key Concatenation"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"In a multi-column index, the index key is formed by ",(0,i.yg)("strong",{parentName:"li"},"concatenating")," the values of the columns in the order they are defined in the index"),(0,i.yg)("li",{parentName:"ul"},"Example: An index on (column1, column2, column3) will have index entries like ",(0,i.yg)("inlineCode",{parentName:"li"},"column1_value|column2_value|column3_value"))),(0,i.yg)("h2",{id:"sorted-order"},"Sorted Order"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Concatenated keys are sorted in ascending order"),(0,i.yg)("li",{parentName:"ul"},"This sorting impacts the efficiency of query operations, as it dictates the order in which records are stored and retrieved")),(0,i.yg)("h2",{id:"leftmost-principle"},"Leftmost Principle"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"In a B-Tree, the leftmost principle refers to the ordering of keys and pointers within each node"),(0,i.yg)("p",{parentName:"blockquote"},"The pointers to child nodes are arranged such that the leftmost pointer points to child nodes containing keys lesser than the first key in the parent node")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Queries that utilize the leftmost columns of the index can leverage the index efficiently",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Example: A search on ",(0,i.yg)("inlineCode",{parentName:"li"},"column1")," or both ",(0,i.yg)("inlineCode",{parentName:"li"},"column1")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"column2")," can effectively use the index")))),(0,i.yg)("h2",{id:"range-queries"},"Range Queries"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The index is most efficient for range queries on the leftmost column defined in the index"),(0,i.yg)("li",{parentName:"ul"},"When a range query is performed on ",(0,i.yg)("inlineCode",{parentName:"li"},"column1"),", the B-Tree can quickly locate the start point of the range and then ",(0,i.yg)("em",{parentName:"li"},"sequentially scan")," through the index")),(0,i.yg)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Partial Index Use Warning")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"If a query doesn't use the leftmost column, but one of the subsequent columns in the index, the B-Tree index is less efficient"),(0,i.yg)("p",{parentName:"div"}," In such cases, the database might have to scan the entire index or resort to a different index or a full table scan"))),(0,i.yg)("h2",{id:"general-guidelines"},"General Guidelines"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE INDEX idx_example ON table_name (most_searched_col, range_col, ...);\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Understand Query Patterns")," ",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Analyze your application's query patterns to determine which columns are frequently involved in searches and filters"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Selective Indexing")," ",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Focus on columns with ",(0,i.yg)("em",{parentName:"li"},"high selectivity")," (unique or near-unique values) for more efficient indexing"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Avoid Over-Indexing")," ",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Excessive indexing can degrade write performance"),(0,i.yg)("li",{parentName:"ul"},"Balance the need for fast reads against write efficiency")))))}u.isMDXComponent=!0}}]);