"use strict";(self.webpackChunkliangzai_for_hire=self.webpackChunkliangzai_for_hire||[]).push([[9828],{5680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>c});var t=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),g=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=g(e.components);return t.createElement(s.Provider,{value:n},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=g(a),d=r,c=m["".concat(s,".").concat(d)]||m[d]||y[d]||i;return a?t.createElement(c,l(l({ref:n},p),{},{components:a})):t.createElement(c,l({ref:n},p))}));function c(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var g=2;g<i;g++)l[g]=a[g];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9623:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var t=a(8168),r=(a(6540),a(5680));const i={sidebar_position:1,sidebar_label:"Summary"},l="Summary",o={unversionedId:"Frontend/ThreeJS/summary",id:"Frontend/ThreeJS/summary",title:"Summary",description:"Transformation",source:"@site/docs/Frontend/ThreeJS/summary.md",sourceDirName:"Frontend/ThreeJS",slug:"/Frontend/ThreeJS/summary",permalink:"/docs/Frontend/ThreeJS/summary",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Summary"},sidebar:"docs",previous:{title:"ThreeJS reading dump",permalink:"/docs/Frontend/ThreeJS/"},next:{title:"GLTF",permalink:"/docs/Frontend/ThreeJS/gltf"}},s=[{value:"Transformation",id:"transformation",children:[],level:2},{value:"Animations",id:"animations",children:[],level:2},{value:"Cameras",id:"cameras",children:[],level:2},{value:"Geometries",id:"geometries",children:[],level:2},{value:"Textures",id:"textures",children:[],level:2},{value:"Materials",id:"materials",children:[],level:2},{value:"Lights",id:"lights",children:[],level:2},{value:"Shadows",id:"shadows",children:[],level:2},{value:"Physics (CANNON)",id:"physics-cannon",children:[],level:2},{value:"Renderers",id:"renderers",children:[],level:2},{value:"Scene Graph",id:"scene-graph",children:[],level:2},{value:"Loading External Models",id:"loading-external-models",children:[],level:2},{value:"Event Handling",id:"event-handling",children:[],level:2},{value:"Grouping Objects",id:"grouping-objects",children:[],level:2},{value:"Raycasting",id:"raycasting",children:[],level:2},{value:"Custom Shaders and Materials",id:"custom-shaders-and-materials",children:[],level:2},{value:"Post-Processing",id:"post-processing",children:[],level:2},{value:"Responsive Design",id:"responsive-design",children:[],level:2},{value:"Performance Optimization",id:"performance-optimization",children:[],level:2}],g={toc:s},p="wrapper";function m(e){let{components:n,...a}=e;return(0,r.yg)(p,(0,t.A)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"summary"},"Summary"),(0,r.yg)("h2",{id:"transformation"},"Transformation"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Usage"),": To manipulate the position, rotation, and scale of objects in 3D space."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Commands"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Position"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"object.position.set(x, y, z)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Rotation"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"object.rotation.set(x, y, z)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Scale"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"object.scale.set(x, y, z)")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Note"),": Transformations are cumulative and order-dependent (rotation can be affected by position, etc.).")),(0,r.yg)("h2",{id:"animations"},"Animations"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Usage"),": To add movement to objects, characters, etc."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Setup"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Animation Mixer"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"const mixer = new THREE.AnimationMixer(object)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Load Animation"),": Use ",(0,r.yg)("inlineCode",{parentName:"li"},"GLTFLoader")," to load animations."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Play Animation"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"mixer.clipAction(gltf.animations[0]).play()")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Update"),": Inside the render loop: ",(0,r.yg)("inlineCode",{parentName:"li"},"mixer.update(deltaTime)")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Note"),": Animations need to be updated in the rendering loop.")),(0,r.yg)("h2",{id:"cameras"},"Cameras"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Usage"),": To control the viewer's perspective in the 3D world."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Types"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Perspective Camera"),": Mimics human eye, ",(0,r.yg)("inlineCode",{parentName:"li"},"new THREE.PerspectiveCamera(fov, aspect, near, far)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Orthographic Camera"),": No perspective distortion, ",(0,r.yg)("inlineCode",{parentName:"li"},"new THREE.OrthographicCamera(left, right, top, bottom, near, far)")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Note"),": Choose based on the type of projection needed (realistic or orthographic).")),(0,r.yg)("h2",{id:"geometries"},"Geometries"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Usage"),": Defines the shape of 3D objects."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Types"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Box"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"new THREE.BoxGeometry(width, height, depth)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Sphere"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"new THREE.SphereGeometry(radius, widthSegments, heightSegments)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Custom"),": Use ",(0,r.yg)("inlineCode",{parentName:"li"},"THREE.BufferGeometry()")," for custom shapes."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Note"),": Geometries are the backbone of any 3D object, defining its structure.")),(0,r.yg)("h2",{id:"textures"},"Textures"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Usage"),": To add surface detail like color, bumpiness, or shininess to geometries."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Setup"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Load Texture"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"const texture = new THREE.TextureLoader().load('path/to/texture.jpg')")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Repeat"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"texture.wrapS = texture.wrapT = THREE.RepeatWrapping")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Note"),": Textures greatly enhance the visual realism of objects.")),(0,r.yg)("h2",{id:"materials"},"Materials"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Usage"),": To define how the surface of geometries interacts with light."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Types"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic"),": No light interaction, ",(0,r.yg)("inlineCode",{parentName:"li"},"new THREE.MeshBasicMaterial({ color })")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Standard"),": Reacts to lighting, ",(0,r.yg)("inlineCode",{parentName:"li"},"new THREE.MeshStandardMaterial({ color })")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Physical"),": Advanced light interaction, ",(0,r.yg)("inlineCode",{parentName:"li"},"new THREE.MeshPhysicalMaterial({ color })")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Note"),": Material choice affects the appearance and realism of objects under different lighting conditions.")),(0,r.yg)("h2",{id:"lights"},"Lights"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Usage"),": To illuminate scenes and create shadows."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Types"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Ambient Light"),": Uniform light, ",(0,r.yg)("inlineCode",{parentName:"li"},"new THREE.AmbientLight(color, intensity)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Point Light"),": Light emitted from a point, ",(0,r.yg)("inlineCode",{parentName:"li"},"new THREE.PointLight(color, intensity, distance)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Directional Light"),": Sun-like light, ",(0,r.yg)("inlineCode",{parentName:"li"},"new THREE.DirectionalLight(color, intensity)")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Note"),": Proper lighting is crucial for setting the mood and enhancing realism.")),(0,r.yg)("h2",{id:"shadows"},"Shadows"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Usage"),": To add realistic shadows cast by objects."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Setup"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Enable Shadows"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"renderer.shadowMap.enabled = true")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Cast Shadows"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"object.castShadow = true")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Receive Shadows"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"object.receiveShadow = true")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Note"),": Shadows increase realism but can be computationally expensive.")),(0,r.yg)("h2",{id:"physics-cannon"},"Physics (CANNON)"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Usage"),": To simulate realistic physics like gravity, collisions."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Setup"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Create Physics World"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"const world = new CANNON.World()")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Add Bodies"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"world.addBody(new CANNON.Body({ mass, shape }))")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Update Physics"),": In the animation loop: ",(0,r.yg)("inlineCode",{parentName:"li"},"world.step(timeStep)")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Note"),": Physics simulations need continuous updates in the animation loop.")),(0,r.yg)("h2",{id:"renderers"},"Renderers"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Concept"),": Renders the visual output of the scene using WebGL."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Use Case"),": Displaying 3D graphics on a web page."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic Syntax"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"const renderer = new THREE.WebGLRenderer(); renderer.setSize(window.innerWidth, window.innerHeight); document.body.appendChild(renderer.domElement);"))),(0,r.yg)("h2",{id:"scene-graph"},"Scene Graph"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Concept"),": A hierarchical model representing all objects in a 3D scene."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Use Case"),": Organizing and managing complex scenes with many objects."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic Syntax"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"const scene = new THREE.Scene(); scene.add(object);"))),(0,r.yg)("h2",{id:"loading-external-models"},"Loading External Models"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Concept"),": Importing pre-made 3D models into Three.js scenes."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Use Case"),": Incorporating complex or detailed models created in 3D modeling software."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic Syntax"),": ",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"GLTF Loader"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"const loader = new THREE.GLTFLoader(); loader.load('model.gltf', (gltf) => { scene.add(gltf.scene); });"))))),(0,r.yg)("h2",{id:"event-handling"},"Event Handling"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Concept"),": Detecting and responding to user interactions like mouse clicks and keyboard input."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Use Case"),": Creating interactive 3D applications."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic Syntax"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"window.addEventListener('click', (event) => { /* handle click */ });"))),(0,r.yg)("h2",{id:"grouping-objects"},"Grouping Objects"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Concept"),": Combining multiple objects into a single group."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Use Case"),": Managing related objects as a single entity, which simplifies transformations and animations."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic Syntax"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"const group = new THREE.Group(); group.add(object1); group.add(object2); scene.add(group);"))),(0,r.yg)("h2",{id:"raycasting"},"Raycasting"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Concept"),": Projecting a ray from a point to detect intersects with objects."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Use Case"),": Implementing features like object selection, mouse hover effects, or collision detection."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic Syntax"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"const raycaster = new THREE.Raycaster(); raycaster.setFromCamera(mouse, camera); const intersects = raycaster.intersectObjects(scene.children);"))),(0,r.yg)("h2",{id:"custom-shaders-and-materials"},"Custom Shaders and Materials"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Concept"),": Writing custom GLSL shaders for advanced visual effects."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Use Case"),": Creating unique and complex visual effects that are not possible with standard materials."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic Syntax"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"const material = new THREE.ShaderMaterial({ vertexShader: myVertexShader, fragmentShader: myFragmentShader });"))),(0,r.yg)("h2",{id:"post-processing"},"Post-Processing"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Concept"),": Applying effects to the rendered image after the scene is rendered."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Use Case"),": Enhancing the visual quality with effects like bloom, depth of field, or color correction."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic Syntax"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"const composer = new THREE.EffectComposer(renderer); const renderPass = new THREE.RenderPass(scene, camera); composer.addPass(renderPass);"))),(0,r.yg)("h2",{id:"responsive-design"},"Responsive Design"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Concept"),": Adapting the rendering to different screen sizes and aspect ratios."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Use Case"),": Ensuring the 3D content looks good on all devices and window sizes."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic Syntax"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"window.addEventListener('resize', () => { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); });"))),(0,r.yg)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Concept"),": Enhancing the efficiency of the application for smoother performance."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Use Case"),": Ensuring your 3D application runs smoothly, especially important for complex scenes or lower-end devices."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Basic Syntax"),": Techniques like geometry merging, texture optimization, and minimizing dynamic shadows can be employed for optimization.")))}m.isMDXComponent=!0}}]);