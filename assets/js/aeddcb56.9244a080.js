"use strict";(self.webpackChunkliangzai_for_hire=self.webpackChunkliangzai_for_hire||[]).push([[3871],{5680:(e,a,t)=>{t.d(a,{xA:()=>u,yg:()=>g});var n=t(6540);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=n.createContext({}),d=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},u=function(e){var a=d(e.components);return n.createElement(o.Provider,{value:a},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=d(t),c=i,g=m["".concat(o,".").concat(c)]||m[c]||p[c]||l;return t?n.createElement(g,r(r({ref:a},u),{},{components:t})):n.createElement(g,r({ref:a},u))}));function g(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=c;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s[m]="string"==typeof e?e:i,r[1]=s;for(var d=2;d<l;d++)r[d]=t[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6902:(e,a,t)=>{t.r(a),t.d(a,{contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var n=t(8168),i=(t(6540),t(5680));const l={sidebar_position:3,sidebar_label:"Best practises"},r="Best practises",s={unversionedId:"Backend/Database/Relational DB/bestPractises",id:"Backend/Database/Relational DB/bestPractises",title:"Best practises",description:"\ud83d\ude93 - Mandatory",source:"@site/docs/Backend/Database/Relational DB/bestPractises.md",sourceDirName:"Backend/Database/Relational DB",slug:"/Backend/Database/Relational DB/bestPractises",permalink:"/docs/Backend/Database/Relational DB/bestPractises",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Best practises"},sidebar:"docs",previous:{title:"Normal Forms",permalink:"/docs/Backend/Database/Relational DB/normalForm"},next:{title:"Indexing",permalink:"/docs/Backend/Database/Relational DB/Indexing/"}},o=[{value:"Service Division",id:"service-division",children:[],level:2},{value:"Database Selection",id:"database-selection",children:[],level:2},{value:"Internal Service Table Model Design",id:"internal-service-table-model-design",children:[],level:2},{value:"Field Standards",id:"field-standards",children:[],level:2},{value:"Index Standards",id:"index-standards",children:[],level:2},{value:"Database Development Standards",id:"database-development-standards",children:[],level:2},{value:"Naming Conventions",id:"naming-conventions",children:[],level:2},{value:"Security Standards",id:"security-standards",children:[],level:2}],d={toc:o},u="wrapper";function m(e){let{components:a,...t}=e;return(0,i.yg)(u,(0,n.A)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"best-practises"},"Best practises"),(0,i.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",null,(0,i.yg)("li",null,"\ud83d\ude93 - Mandatory"),(0,i.yg)("li",null,"\ud83d\udcaa\ud83c\udffb - Recommended")))),(0,i.yg)("h2",{id:"service-division"},"Service Division"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Prohibit direct database access across services."),(0,i.yg)("li",{parentName:"ul"},"Data interaction across services must be done through API calls (or develop your own Flink tasks for data synchronization",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"This is advised if relying on historical data for large-scale processing is too costly in MySQL"),(0,i.yg)("li",{parentName:"ul"},"Data team can provide support ")))),(0,i.yg)("h2",{id:"database-selection"},"Database Selection"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Choose the appropriate type of database based on the usage scenario."),(0,i.yg)("li",{parentName:"ul"},"Particularly, the use of Elasticsearch and Linodorm must match real application scenarios.")),(0,i.yg)("h2",{id:"internal-service-table-model-design"},"Internal Service Table Model Design"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Use the correct storage engine",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"e.g. InnoDB recommended for MySQL"))),(0,i.yg)("li",{parentName:"ul"},"Table design should be simple",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Do not store multi-dimensional data in one table",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Select the suitable table design model (1:1, 1:n, n:1) based on specific business scenarios"))),(0,i.yg)("li",{parentName:"ul"},"Field design should be straightforward, with each column representing an independent attribute"),(0,i.yg)("li",{parentName:"ul"},"Store data clearly, simply, and independently "),(0,i.yg)("li",{parentName:"ul"},"Avoid storing similar types of data in multiple places."),(0,i.yg)("li",{parentName:"ul"},"Do not store different types of data in the same table."),(0,i.yg)("li",{parentName:"ul"},"A table should not have too many fields, generally no more than 20. Consider splitting the table if there are too many fields."),(0,i.yg)("li",{parentName:"ul"},"Fields in the same table should be related. Split unrelated tables."),(0,i.yg)("li",{parentName:"ul"},"For 1:n, n:n table design models, ensure database consistency at the code level. Avoid using foreign keys in the database (due to performance issues and concurrency deadlocks)."))),(0,i.yg)("li",{parentName:"ul"},"Tables must have a primary key (auto-increment, composite primary keys not recommended)"),(0,i.yg)("li",{parentName:"ul"},"Avoid Redundant Data Storage",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Strictly adhere to the first normal form when creating tables (ensure atomicity of each column) to avoid duplicate data."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Tables should meet the second normal form (ensure every column in the table is related to the primary key) to avoid partial dependencies."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Tables should meet the third normal form (ensure each column is directly related to the primary key, not indirectly) to avoid transitive dependencies."))),(0,i.yg)("li",{parentName:"ul"},"Consider consistency and latency when setting up redundant fields for performance or usability reasons",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Denormalized field design can be considered if there is a significant improvement in performance"),(0,i.yg)("li",{parentName:"ul"},"Consider denormalized design if redundant fields facilitate storage"),(0,i.yg)("li",{parentName:"ul"},"However, prioritize data consistency and acceptable latency in denormalized designs"))),(0,i.yg)("li",{parentName:"ul"},"Avoid Storing the Same Data in Multiple Places",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Developers should be clear about whether they are storing data from other internal services to avoid duplication"),(0,i.yg)("li",{parentName:"ul"},"Determine a unique external data source (such as IP) to ensure data accuracy. If uncertain, submit to the data committee for discussion"),(0,i.yg)("li",{parentName:"ul"},"Data warehouses should check and review based on actual usage")))),(0,i.yg)("h2",{id:"field-standards"},"Field Standards"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Tables, fields, etc., must have necessary English comments. If a field's numeric values represent different meanings, it should be clearly explained in the comments"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 All columns storing the same data must have consistent names and types ",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"user_id fields in different tables must have the same type"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Use TIMESTAMP for storing millisecond-level time, not int type or strings",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"(Because they lack automatic update attributes)"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Prefer the smallest data type suitable for your storage needs",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"e.g., prefer varchar over char"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Allocate field lengths as per actual needs; avoid arbitrarily large capacities"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Define all fields as NOT NULL"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Use DECIMAL for storing precise floating-point numbers",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"float can sometimes lead to precision issues."))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Use large fields like blob, text sparingly"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Allocate field lengths as per actual needs",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"avoid arbitrarily large capacities."))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Keep the number of fields in core tables as few as possible; consider splitting large fields"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Use UNSIGNED for storing non-negative integers",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"The same byte size can store a larger range of values"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Use VARBINARY for storing case-sensitive variable-length strings or binary content"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb For VARCHAR(N), keep N as small as possible,",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"MySQL limits the total length of all VARCHAR fields in a table to 65535 bytes"),(0,i.yg)("li",{parentName:"ul"},"Memory operations like sorting and creating temporary tables use the length of N for memory allocation"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Store large fields and less frequently accessed fields in separate tables to separate cold and hot data"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Ideally, keep the number of columns in a single table below 50"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Default to creating timestamp fields for creation and modification times")),(0,i.yg)("h2",{id:"index-standards"},"Index Standards"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Tables must have a primary key, which creates a primary key index ",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"The primary key column should not be frequently updated and preferably not be a string type "),(0,i.yg)("li",{parentName:"ul"},"Default to using a non-null and unique column "),(0,i.yg)("li",{parentName:"ul"},"Ideally, the primary key should be auto_increment and not null"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Newly created unique indexes must not duplicate the primary key"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Choose columns with high distinctiveness as indexes",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Avoid creating indexes on attributes that are frequently updated or have low distinctiveness"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Anticipate SQL queries and create indexes in advance",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Especially time field indexes for data warehouse pulls ",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Advised to add indexes for creation time and modification time"))))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Avoid performing mathematical and function operations on indexed columns ",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Prevents the index from being filtered and unused"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 When creating composite indexes, place columns with high distinctiveness first"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Ensure indexed fields are not NULL, considering default values",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"NULL occupies space and significantly impacts the efficiency of index queries"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Avoid creating an individual index for every column in a table"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Limit the number of fields in a single index to 5 and the total number of indexes on a table to 5",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Index design should follow the B+ Tree index leftmost prefix match principle"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Avoid indexing large fields like blob/text, as they consume excessive storage space"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Use prefix indexing for strings, with the prefix index length not exceeding 128 characters",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Prefer prefix indexes and consider adding virtual columns for indexing if necessary."))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Ensure created indexes cover 80% of the main queries. Focus on solving the primary issues rather than covering all possibilities."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Use unique indexes wherever possible to improve query efficiency."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb For repetitive SQL statements with multiple fields, modify the condition fields' order and create a combined index to reduce the number of indexes."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Create appropriate indexes for DML, order by, and group by fields."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Important SQL must be indexed, with priority given to covering indexes, especially for fields involved in multi-table joins."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Avoid implicit index type conversion."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Avoid redundant indexes (do not add unnecessary indexes)."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Avoid indexing frequently used small tables."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Minimize the use of foreign keys",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Implement referential integrity at the business end for more efficient indexing"),(0,i.yg)("li",{parentName:"ul"},"Explanation: Avoid operations on parent and child tables affecting each other, reducing usability")))),(0,i.yg)("h2",{id:"database-development-standards"},"Database Development Standards"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Do not store large data such as images and files in the database"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 It is recommended to keep the data volume of a single table below 20 million rows",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Note that this is not a MySQL database limitation, but large sizes pose significant challenges in modifying table structures, backups, and recovery"),(0,i.yg)("li",{parentName:"ul"},"MySQL does not limit storage, which depends on storage settings and file systems"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Use InnoDB as the storage engine."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Table creation requires review and approval by the development team leader (TL)"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Perform major table modifications during low business traffic periods"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Use utf8mb4 as the database character set"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Avoid using stored procedures, triggers, functions, etc.",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Can lead to tight coupling with the database"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Avoid using JOINs with large tables",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"MySQL's optimizer has overly simplistic strategies for optimizing joins"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Avoid performing calculations in the database",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Complex computations should be moved to the business application."))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Refuse large SQL statements, large transactions, and large batches     ",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Should be handled at application layer"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb When designing databases, consider whether future scalability has been taken into account."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Combine SQL statements, especially in DML, by merging multiple values to reduce interactions with the database."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Avoid negative queries such as 'not in' or 'like', as they can lead to full table scans and reduce buffer pool utilization."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Use 'union all' instead of 'union', as 'union' involves sorting operations for deduplication, leading to lower efficiency."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Avoid subqueries; it's advisable to convert them into join queries."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Avoid cross-database queries."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Implement reasonable pagination, especially for large pagination."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb If UPDATE and DELETE statements do not use LIMIT and involve large data volumes, it can impact database performance and cause master-slave delays, possibly leading to inconsistencies."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Be cautious when deleting database objects (including tables, indexes, fields, etc.)."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Use internal domain names instead of IPs to connect to databases."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Consider horizontal partitioning of log-type tables based on creation time and periodically archive historical data.")),(0,i.yg)("h2",{id:"naming-conventions"},"Naming Conventions"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 The permissible character range for names of tables, fields, etc., includes A-Z, a-z, 0-9, and underscore (_)",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"No other characters are allowed"),(0,i.yg)("li",{parentName:"ul"},"Principally, table names should not include numbers, and field names should not include numbers unless in special cases"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Database names, table names, and field names should be lowercase, follow the underscore style, not exceed 32 characters, be meaningful and intuitive, and preferably use nouns rather than verbs",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"The names should be related to business or product lines, and mixing of pinyin and English is prohibited"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Naming format for ordinary indexes: idx_tableName_indexFieldName (if there are multiple indexes starting with the first field name, add the second field name; abbreviate if too long)",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Unique index naming format: uk_tableName_indexFieldName (index names must be all lowercase, abbreviate if too long)"),(0,i.yg)("li",{parentName:"ul"},"Primary key index naming: pk_fieldName"),(0,i.yg)("li",{parentName:"ul"},"Sequence naming format: seq_tablename"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Database names, table names, and field names must not use MySQL reserved words, such as desc, range, match, asc, index, etc."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Temporary table names must start with 'tmp' and end with a date suffix."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Backup table names must start with 'bak' and end with a date suffix."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Fields expressing a yes/no concept should be named using the format\nis_xxx."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Tables within the same module should use the same prefix as much as possible, and table names should be meaningful",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"for instance, all log tables starting with 'log_'"))),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Foreign key fields (if any) should be named using the format tableName_fieldName to represent their relationships"),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Fields with the same meaning across different tables should have the same name",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"For fields with the same meaning across tables, use the naming format tableName_fieldName, omitting the module prefix")))),(0,i.yg)("h2",{id:"security-standards"},"Security Standards"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Prohibit storing plaintext passwords in the database; passwords must be encrypted before storage."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Developers are forbidden from directly exporting or querying data involving user-sensitive information for business colleagues. If necessary, such actions require approval from senior leadership."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Operations involving sensitive data interaction with the database must have audit logs, and alerts should be set up when necessary."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\ude93 Implement a whitelist feature for IP addresses connecting to the database to prevent unauthorized IP access."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Regularly change usernames and passwords for online database connections."),(0,i.yg)("li",{parentName:"ul"},"\ud83d\udcaa\ud83c\udffb Prohibit the plaintext storage of user-sensitive information, such as phone numbers, in the database")))}m.isMDXComponent=!0}}]);