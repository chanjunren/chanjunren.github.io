"use strict";(self.webpackChunkliangzai_for_hire=self.webpackChunkliangzai_for_hire||[]).push([[7150],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),h=r,g=p["".concat(o,".").concat(h)]||p[h]||d[h]||i;return t?a.createElement(g,l(l({ref:n},u),{},{components:t})):a.createElement(g,l({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=h;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},7837:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=t(8168),r=(t(6540),t(5680));const i={sidebar_position:6,sidebar_label:"Hashing / Indexing"},l="Hashing and Indexing",s={unversionedId:"Backend/Rule Engine/Examples/hashing-indexing",id:"Backend/Rule Engine/Examples/hashing-indexing",title:"Hashing and Indexing",description:"Scenario",source:"@site/docs/Backend/Rule Engine/Examples/hashing-indexing.md",sourceDirName:"Backend/Rule Engine/Examples",slug:"/Backend/Rule Engine/Examples/hashing-indexing",permalink:"/docs/Backend/Rule Engine/Examples/hashing-indexing",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,sidebar_label:"Hashing / Indexing"},sidebar:"docs",previous:{title:"Salience",permalink:"/docs/Backend/Rule Engine/Examples/salience"},next:{title:"SSH",permalink:"/docs/Backend/Shell/ssh"}},o=[{value:"Scenario",id:"scenario",children:[],level:3},{value:"Rules",id:"rules",children:[],level:3},{value:"Using HashSet and Indexing for Efficient Rule Processing",id:"using-hashset-and-indexing-for-efficient-rule-processing",children:[],level:3},{value:"Implementation",id:"implementation",children:[{value:"Index Creation",id:"index-creation",children:[],level:4},{value:"Rule Matching",id:"rule-matching",children:[],level:4}],level:3},{value:"Example Code Structure",id:"example-code-structure",children:[],level:3},{value:"Explanation",id:"explanation",children:[],level:3},{value:"Conclusion",id:"conclusion",children:[],level:3}],c={toc:o},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"hashing-and-indexing"},"Hashing and Indexing"),(0,r.yg)("h3",{id:"scenario"},"Scenario"),(0,r.yg)("p",null,"Imagine a rule engine that processes transactions and applies various rules based on transaction properties like type and amount."),(0,r.yg)("h3",{id:"rules"},"Rules"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},'Rule 1: If the transaction is a "refund" and the amount is greater than $1000, flag for review.'),(0,r.yg)("li",{parentName:"ul"},'Rule 2: If the transaction is a "purchase" and the amount is less than $50, apply a discount.'),(0,r.yg)("li",{parentName:"ul"},'Rule 3: If the transaction is an "international transfer", perform currency conversion.')),(0,r.yg)("h3",{id:"using-hashset-and-indexing-for-efficient-rule-processing"},"Using HashSet and Indexing for Efficient Rule Processing"),(0,r.yg)("p",null,"To efficiently process these rules, you can index them based on the transaction type. A HashSet or similar data structure can be used for quick lookups."),(0,r.yg)("h3",{id:"implementation"},"Implementation"),(0,r.yg)("h4",{id:"index-creation"},"Index Creation"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Create a mapping of transaction types to rules "),(0,r.yg)("li",{parentName:"ul"},"For each transaction type, you maintain a HashSet of rules applicable to that type")),(0,r.yg)("h4",{id:"rule-matching"},"Rule Matching"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"When a transaction comes in, you first determine its type."),(0,r.yg)("li",{parentName:"ul"},"Then, look up the set of rules associated with this type."),(0,r.yg)("li",{parentName:"ul"},"Iterate through this set and apply each rule to the transaction.")),(0,r.yg)("h3",{id:"example-code-structure"},"Example Code Structure"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'class Rule {\n    String type;\n    Predicate<Transaction> condition;\n    Action action;\n}\n\nMap<String, HashSet<Rule>> ruleIndex = new HashMap<>();\n\n// Populate the index\nruleIndex.put("refund", new HashSet<>(Arrays.asList(rule1)));\nruleIndex.put("purchase", new HashSet<>(Arrays.asList(rule2)));\nruleIndex.put("international transfer", new HashSet<>(Arrays.asList(rule3)));\n\n// Function to process a transaction\nvoid processTransaction(Transaction transaction) {\n    String type = transaction.getType();\n    HashSet<Rule> applicableRules = ruleIndex.get(type);\n\n    if (applicableRules != null) {\n        for (Rule rule : applicableRules) {\n            if (rule.condition.test(transaction)) {\n                rule.action.execute(transaction);\n            }\n        }\n    }\n}\n\n')),(0,r.yg)("h3",{id:"explanation"},"Explanation"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Data Structures: The ruleIndex is a HashMap where each key is a transaction type, and the value is a HashSet of rules. This structure allows for quick retrieval of rules based on transaction type."),(0,r.yg)("li",{parentName:"ul"},"Process Flow: When a transaction needs to be processed, the engine quickly identifies the subset of rules that apply to that transaction\u2019s type, thus avoiding the need to evaluate every rule against every transaction.")),(0,r.yg)("h3",{id:"conclusion"},"Conclusion"),(0,r.yg)("p",null,"In rule engines, this approach of using hash-based structures and indexing significantly improves efficiency, especially when dealing with a large number of rules. It ensures that only a relevant subset of rules is considered for each transaction, reducing the computational overhead."))}p.isMDXComponent=!0}}]);