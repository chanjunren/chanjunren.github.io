"use strict";(self.webpackChunkliangzai_for_hire=self.webpackChunkliangzai_for_hire||[]).push([[6186],{5680:(e,a,t)=>{t.d(a,{xA:()=>g,yg:()=>y});var n=t(6540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=n.createContext({}),s=function(e){var a=n.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},g=function(e){var a=s(e.components);return n.createElement(d.Provider,{value:a},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,y=c["".concat(d,".").concat(m)]||c[m]||p[m]||i;return t?n.createElement(y,l(l({ref:a},g),{},{components:t})):n.createElement(y,l({ref:a},g))}));function y(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var d in a)hasOwnProperty.call(a,d)&&(o[d]=a[d]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1530:(e,a,t)=>{t.r(a),t.d(a,{contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=t(8168),r=(t(6540),t(5680));const i={sidebar_position:2,sidebar_label:"Data Structures"},l="Index Implementation",o={unversionedId:"Backend/Database/Relational DB/Indexing/dataStructures",id:"Backend/Database/Relational DB/Indexing/dataStructures",title:"Index Implementation",description:"Adapted from https://builtin.com/data-science/B Tree-index",source:"@site/docs/Backend/Database/Relational DB/Indexing/dataStructures.md",sourceDirName:"Backend/Database/Relational DB/Indexing",slug:"/Backend/Database/Relational DB/Indexing/dataStructures",permalink:"/docs/Backend/Database/Relational DB/Indexing/dataStructures",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Data Structures"},sidebar:"docs",previous:{title:"Disk structure",permalink:"/docs/Backend/Database/Relational DB/Indexing/diskStructure"},next:{title:"Multi Column Indexes",permalink:"/docs/Backend/Database/Relational DB/Indexing/multiColumnIndexes"}},d=[{value:"B Tree",id:"b-tree",children:[{value:"Why is it necessary",id:"why-is-it-necessary",children:[],level:3}],level:2},{value:"B+ Tree",id:"b-tree-1",children:[{value:"How is it used",id:"how-is-it-used",children:[{value:"Storing table",id:"storing-table",children:[],level:4},{value:"Iterating through table",id:"iterating-through-table",children:[],level:4},{value:"Using the index",id:"using-the-index",children:[],level:4}],level:3}],level:2},{value:"Comparisons",id:"comparisons",children:[],level:2},{value:"Conslusion",id:"conslusion",children:[],level:2}],s={toc:d},g="wrapper";function c(e){let{components:a,...i}=e;return(0,r.yg)(g,(0,n.A)({},s,i,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"index-implementation"},"Index Implementation"),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"Adapted from ",(0,r.yg)("a",{parentName:"p",href:"https://builtin.com/data-science/B"},"https://builtin.com/data-science/B")," Tree-index"))),(0,r.yg)("h2",{id:"b-tree"},"B Tree"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A balanced tree data structure for maintaining sorted data"),(0,r.yg)("li",{parentName:"ul"},"Nodes contain keys and data (or references to data)"),(0,r.yg)("li",{parentName:"ul"},"Child pointers in nodes are positioned between keys")),(0,r.yg)("h3",{id:"why-is-it-necessary"},"Why is it necessary"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Facilitates CRUD operations in logarithmic time due to balanced structure")),(0,r.yg)("h2",{id:"b-tree-1"},"B+ Tree"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Similar to B Tree but stores data only in leaf nodes"),(0,r.yg)("li",{parentName:"ul"},"Internal nodes store keys for navigation"),(0,r.yg)("li",{parentName:"ul"},"Leaf nodes are linked together, containing all data")),(0,r.yg)("h3",{id:"how-is-it-used"},"How is it used"),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Data to store")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("table",{parentName:"div"},(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Mark"),(0,r.yg)("th",{parentName:"tr",align:null},"Age"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"June"),(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"28")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Alex"),(0,r.yg)("td",{parentName:"tr",align:null},"32"),(0,r.yg)("td",{parentName:"tr",align:null},"45")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Tom"),(0,r.yg)("td",{parentName:"tr",align:null},"37"),(0,r.yg)("td",{parentName:"tr",align:null},"23")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Ron"),(0,r.yg)("td",{parentName:"tr",align:null},"87"),(0,r.yg)("td",{parentName:"tr",align:null},"13")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Mark"),(0,r.yg)("td",{parentName:"tr",align:null},"20"),(0,r.yg)("td",{parentName:"tr",align:null},"48")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Bob"),(0,r.yg)("td",{parentName:"tr",align:null},"89"),(0,r.yg)("td",{parentName:"tr",align:null},"32")))))),(0,r.yg)("h4",{id:"storing-table"},"Storing table"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Uses B+ Tree for primary key indexing"),(0,r.yg)("li",{parentName:"ul"},"Rows are serialized and stored in B+ Tree leaf nodes")),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"BTree+ generated for PKEY")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},(0,r.yg)("img",{alt:"Resulting B+Tree",src:t(9133).A})))),(0,r.yg)("h4",{id:"iterating-through-table"},"Iterating through table"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Uses binary search and sequential access in B+ Tree")),(0,r.yg)("h4",{id:"using-the-index"},"Using the index"),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"BTree generated for index")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},(0,r.yg)("img",{alt:"B Tree Index Example",src:t(671).A})))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"DS"),(0,r.yg)("th",{parentName:"tr",align:null},"Use Case"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"B Tree"),(0,r.yg)("td",{parentName:"tr",align:null},"Often used for indexes where quick search, insertion, and deletion are needed")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"B+ Tree"),(0,r.yg)("td",{parentName:"tr",align:null},"Preferred for indexing large data sets, particularly for range queries")))),(0,r.yg)("h2",{id:"comparisons"},"Comparisons"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null}),(0,r.yg)("th",{parentName:"tr",align:null},"B Tree"),(0,r.yg)("th",{parentName:"tr",align:null},"B+ Tree"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Node utilization / Disk I/O Efficiency"),(0,r.yg)("td",{parentName:"tr",align:null},"Each node holds keys and data (or pointers to data) => ",(0,r.yg)("strong",{parentName:"td"},"limits number of keys each node can hold")," => deeper tree / more disk reads"),(0,r.yg)("td",{parentName:"tr",align:null},"Internal nodes only store keys => shallower tree => fewer disk reads")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Range Queries / Sequential Access"),(0,r.yg)("td",{parentName:"tr",align:null},"Range queries might require traversal back up anddown to the tree => less efficient"),(0,r.yg)("td",{parentName:"tr",align:null},"Leaf nodes linked => more efficient range queries / sequential access")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Key Duplication"),(0,r.yg)("td",{parentName:"tr",align:null},"No duplicate keys between internal node (key / associated data only stored once)"),(0,r.yg)("td",{parentName:"tr",align:null},"Keys stored in both leaf / internal nodes")))),(0,r.yg)("h2",{id:"conslusion"},"Conslusion"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Efficiency in Different Scenarios"),": While both B Trees and B+ Trees are efficient, B+ Trees are generally preferred in disk-based systems because they provide better disk I/O efficiency and are more effective for range queries and sequential access")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Logarithmic Time Complexity"),": Both structures indeed offer logarithmic time complexity for basic operations, but the constants involved (like the number of disk reads) can be significantly different, affecting real-world performance")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Space Efficiency"),": If B Trees are only storing pointers (not the actual data), the difference in space efficiency becomes less pronounced. However, B+ Trees still often have an edge due to their structure allowing for more keys per node and thus a shallower tree")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Closing words lol",src:t(8392).A})))}c.isMDXComponent=!0},8392:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/chatgpt_db_engine-d6934f329ecbe9feb6c6b9deb73c6443.png"},9133:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/example_b_plus_tree-711d447d0b846496753e8bdd52aae02c.jpeg"},671:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/example_b_tree-0a9fe291542d0b45dc0e285f60b4dabe.png"}}]);