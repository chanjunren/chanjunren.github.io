"use strict";(self.webpackChunkliangzai_for_hire=self.webpackChunkliangzai_for_hire||[]).push([[9950],{5680:(e,n,a)=>{a.d(n,{xA:()=>d,yg:()=>y});var t=a(6540);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function u(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=t.createContext({}),s=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},d=function(e){var n=s(e.components);return t.createElement(o.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),c=s(a),p=l,y=c["".concat(o,".").concat(p)]||c[p]||m[p]||r;return a?t.createElement(y,i(i({ref:n},d),{},{components:a})):t.createElement(y,i({ref:n},d))}));function y(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=p;var u={};for(var o in n)hasOwnProperty.call(n,o)&&(u[o]=n[o]);u.originalType=e,u[c]="string"==typeof e?e:l,i[1]=u;for(var s=2;s<r;s++)i[s]=a[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},1320:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>u,toc:()=>o});var t=a(8168),l=(a(6540),a(5680));const r={sidebar_position:7,sidebar_label:"Full-Body Search"},i="Full-Body Search",u={unversionedId:"Backend/Database/Elastic Search/chapter-7",id:"Backend/Database/Elastic Search/chapter-7",title:"Full-Body Search",description:"Empty Search",source:"@site/docs/Backend/Database/Elastic Search/chapter-7.md",sourceDirName:"Backend/Database/Elastic Search",slug:"/Backend/Database/Elastic Search/chapter-7",permalink:"/docs/Backend/Database/Elastic Search/chapter-7",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,sidebar_label:"Full-Body Search"},sidebar:"docs",previous:{title:"Mapping and Analysis",permalink:"/docs/Backend/Database/Elastic Search/chapter-6"},next:{title:"Sorting and Relevance",permalink:"/docs/Backend/Database/Elastic Search/chapter-8"}},o=[{value:"Empty Search",id:"empty-search",children:[],level:2},{value:"Query DSL",id:"query-dsl",children:[{value:"Structure of a Query clause",id:"structure-of-a-query-clause",children:[],level:3},{value:"Combining Multiple Queries",id:"combining-multiple-queries",children:[],level:3},{value:"Queries and Filters",id:"queries-and-filters",children:[{value:"Performance Differences:",id:"performance-differences",children:[],level:4}],level:3}],level:2},{value:"Filters",id:"filters",children:[{value:"<code>term</code>",id:"term",children:[],level:3},{value:"<code>terms</code>",id:"terms",children:[],level:3},{value:"<code>range</code>",id:"range",children:[],level:3},{value:"<code>exist</code> and <code>missing</code>",id:"exist-and-missing",children:[],level:3},{value:"<code>bool</code>",id:"bool",children:[],level:3}],level:2},{value:"Queries",id:"queries",children:[{value:"<code>match_all</code>",id:"match_all",children:[],level:3},{value:"<code>match</code>",id:"match",children:[],level:3},{value:"<code>multi_match</code>",id:"multi_match",children:[],level:3},{value:"<code>bool</code>",id:"bool-1",children:[],level:3}],level:2},{value:"Combining Queries with Filters",id:"combining-queries-with-filters",children:[{value:"Filtering a Query",id:"filtering-a-query",children:[],level:3},{value:"Just filter",id:"just-filter",children:[],level:3},{value:"Query as a filter",id:"query-as-a-filter",children:[],level:3}],level:2},{value:"Validating Queries",id:"validating-queries",children:[],level:2},{value:"Understanding errors",id:"understanding-errors",children:[],level:2},{value:"Understanding Queries",id:"understanding-queries",children:[],level:2}],s={toc:o},d="wrapper";function c(e){let{components:n,...a}=e;return(0,l.yg)(d,(0,t.A)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"full-body-search"},"Full-Body Search"),(0,l.yg)("h2",{id:"empty-search"},"Empty Search"),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"GET /_search")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"Body: {}\nResult: Returns all documents in all indices\n")),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"GET /_search")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'Body: {\n    "query": {\n        "match_all": {}\n    }\n}\nResult: Returns all documents in all indices\n')),(0,l.yg)("p",null,(0,l.yg)("em",{parentName:"p"},"Searching one, many or _all indices"),"\n",(0,l.yg)("inlineCode",{parentName:"p"},"GET /index_2014*/type1,type2/_search")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"Body: {}\nResult: ?? Idk\n")),(0,l.yg)("p",null,(0,l.yg)("em",{parentName:"p"},"Paginated result"),"\n",(0,l.yg)("inlineCode",{parentName:"p"},"GET /_search")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'body: {\n    "from": 30,\n    "size": 10\n}\n')),(0,l.yg)("div",{className:"admonition admonition-info alert alert--info"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"The authors of Elasticsearch prefer using GET for a search request because they feel\nthat it describes the action\u2014retrieving information\u2014better than the POST verb. How\u2010\never, because GET with a request body is not universally supported, the search API\nalso accepts POST requests:"))),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"POST /_search")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'{\n "from": 30,\n "size": 10\n}\n')),(0,l.yg)("h2",{id:"query-dsl"},"Query DSL"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Search language that is used to interact with Lucene")),(0,l.yg)("h3",{id:"structure-of-a-query-clause"},"Structure of a Query clause"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"Typical Structure:\n{\n    QUERY_NAME: {\n        ARGUMENT: VALUE,\n        ARGUMENT: VALUE...\n    }\n}\n\nTargeting a specific field\n{\n    QUERY_NAME: {\n        FIELD_NAME: {\n            ARGUMENT: VALUE,\n            ARGUMENT: VALUE,\n        }\n    }\n}\n")),(0,l.yg)("h3",{id:"combining-multiple-queries"},"Combining Multiple Queries"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Term"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"Leaf"),(0,l.yg)("td",{parentName:"tr",align:null},"Used to compare a field / fields to a query string")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"Compound"),(0,l.yg)("td",{parentName:"tr",align:null},"Used to combineother query clauses")))),(0,l.yg)("h3",{id:"queries-and-filters"},"Queries and Filters"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Filter",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Asks yes | no question of every document"),(0,l.yg)("li",{parentName:"ul"},"Used for fields with exact values"))),(0,l.yg)("li",{parentName:"ul"},"Query",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Similar to filter"),(0,l.yg)("li",{parentName:"ul"},"Also ask: ",(0,l.yg)("em",{parentName:"li"},"how well does this document match?")),(0,l.yg)("li",{parentName:"ul"},"Calculates how relevant a document is to the query"),(0,l.yg)("li",{parentName:"ul"},"Assigns document a relevance score")))),(0,l.yg)("h4",{id:"performance-differences"},"Performance Differences:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Filters quick to caulculate, cacheable"),(0,l.yg)("li",{parentName:"ul"},"Query calculates relevance as well",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Not cacheable"))),(0,l.yg)("li",{parentName:"ul"},"Basically, filters more performant than queries")),(0,l.yg)("h2",{id:"filters"},"Filters"),(0,l.yg)("h3",{id:"term"},(0,l.yg)("inlineCode",{parentName:"h3"},"term")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Filter by exact values")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'{ "term": { "age": 26 }}\n{ "term": { "date": "2014-09-01" }}\n{ "term": { "public": true }}\n{ "term": { "tag": "full_text" }}\n')),(0,l.yg)("h3",{id:"terms"},(0,l.yg)("inlineCode",{parentName:"h3"},"terms")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Same as term filter, but can specify multiple values to match")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'{ "terms": { "tag": ["search", "full_text", "nosql" ]}}\n')),(0,l.yg)("h3",{id:"range"},(0,l.yg)("inlineCode",{parentName:"h3"},"range")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Numbers / date"),(0,l.yg)("li",{parentName:"ul"},"Opeartors",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"gt"),(0,l.yg)("li",{parentName:"ul"},"gte"),(0,l.yg)("li",{parentName:"ul"},"lt"),(0,l.yg)("li",{parentName:"ul"},"lte")))),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'{\n    "range": {\n        "age": {\n            "gte": 20,\n            "lt": 30,\n        }\n    }\n}\n')),(0,l.yg)("h3",{id:"exist-and-missing"},(0,l.yg)("inlineCode",{parentName:"h3"},"exist")," and ",(0,l.yg)("inlineCode",{parentName:"h3"},"missing")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"exist"),": field contains one or more specified values"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"missing"),": doesn't have specified values")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'{\n    "exists": {\n        "field": "title"\n    }\n}\n')),(0,l.yg)("h3",{id:"bool"},(0,l.yg)("inlineCode",{parentName:"h3"},"bool")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Used to combine multiple filter clauses"),(0,l.yg)("li",{parentName:"ul"},"Params:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"must"),": clauses MUST match"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"must_not"),": clauses MUST NOT match"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"should"),": at least one clause must match"))),(0,l.yg)("li",{parentName:"ul"},"Each param can accept single filter clause / array of filter clauses")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'{\n    "bool": {\n        "must": {\n            "term": {\n                "folder": "inbox"\n            }\n        },\n        "must_not": {\n            "term": {\n                "tag": "spam"\n            }\n        },\n        "should": [\n            {\n                "term": {\n                    "starred": true\n                }\n            },\n            {\n                "term": {\n                    "unread": true\n                }\n            }\n        ]\n    }\n}\n')),(0,l.yg)("h2",{id:"queries"},"Queries"),(0,l.yg)("h3",{id:"match_all"},(0,l.yg)("inlineCode",{parentName:"h3"},"match_all")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Simply matches all documents"),(0,l.yg)("li",{parentName:"ul"},"Default query used if non specified"),(0,l.yg)("li",{parentName:"ul"},"Used if no query is specified")),(0,l.yg)("h3",{id:"match"},(0,l.yg)("inlineCode",{parentName:"h3"},"match")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Standard query used for full-text / exact value in almost any field",(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre"},"- Analysis will be performed for full-text field\n- Exact match for fields containing exact values\n")),(0,l.yg)("div",{parentName:"li",className:"admonition admonition-note alert alert--secondary"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"Better to use filter instead of query for exact value matches"))))),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'{ "match": {"age": 26 }}\n{ "match": {"date": "2023-08-07" }}\n{ "match": {"public": true }}\n{ "match": {"tag": "full_text" }}\n')),(0,l.yg)("h3",{id:"multi_match"},(0,l.yg)("inlineCode",{parentName:"h3"},"multi_match")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Allows you to run the same match query on multiple fields")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'{\n    "multi_match": {\n        "query": "full text search",\n        "fields": ["title", "body" ]\n    }\n}\n')),(0,l.yg)("h3",{id:"bool-1"},(0,l.yg)("inlineCode",{parentName:"h3"},"bool")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Used to combine multiple query clauses"),(0,l.yg)("li",{parentName:"ul"},"Combines the _score from each ",(0,l.yg)("inlineCode",{parentName:"li"},"must")," / ",(0,l.yg)("inlineCode",{parentName:"li"},"should")," clause"),(0,l.yg)("li",{parentName:"ul"},"Params:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"must")," clauses that MUST match for document to be included"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"must_not")," clauses that MUST NOT match for document to be included"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"should"),": increase _score if clauses match")))),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'{\n    "bool": {\n        "must": {\n            "match": {\n                "title": "how to make millions"\n            }\n        },\n        "must_not": {\n            "match": {\n                "tag": "spam"\n            }\n        },\n        "should": [\n            {\n                "match": {\n                    "tag": "starred"\n                }\n            },\n            {\n                "range": {\n                    "date": {\n                        "gte": "2014-01-01"\n                    }\n                }\n            }\n        ]\n    }\n}\n')),(0,l.yg)("h2",{id:"combining-queries-with-filters"},"Combining Queries with Filters"),(0,l.yg)("h3",{id:"filtering-a-query"},"Filtering a Query"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'Query:\n{\n    "match": {\n        "email": "business opportunity"\n    }\n}\nFilter:\n{\n    "term": {\n        "folder": "inbox"\n    }\n}\nBeepboopbeepcombined:\n{\n    "filtered": {\n        "query": {\n            "match": {\n                "email": "business opportunity"\n            }\n        },\n        "filter": {\n            "term": {\n                "folder": "inbox"\n            }\n        }\n    }\n}\n')),(0,l.yg)("h3",{id:"just-filter"},"Just filter"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'{\n    "query": {\n        "filtered": {\n            "filter": {\n                "term": {\n                    "folder": "inbox"\n                }\n            }\n        },\n        "query": { // Can be omited\n            "match_all": {}\n        }\n    }\n}\n')),(0,l.yg)("h3",{id:"query-as-a-filter"},"Query as a filter"),(0,l.yg)("p",null,'{\n"query": {\n"filtered": {\n"filter: {\n"bool": {\n"must": {\n"term": {\n"folder": "inbox"\n}\n},\n"must_not": {\n"query": {\n"match": {\n"email": "urgent business proposal"\n}\n}\n}\n}\n}\n}\n}\n}'),(0,l.yg)("h2",{id:"validating-queries"},"Validating Queries"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Used to check whether a query is valid")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'GET /gb/tweet/_validate/query\nBody: {\n    "query": {\n        "tweet": {\n            "match": "really powerful"\n        }\n    }\n}\n\nResponse: {\n    "valid": false,\n    "_shards": {\n        "total": 1,\n        "successful": 1,\n        "failed": 0,\n    }\n}\n')),(0,l.yg)("h2",{id:"understanding-errors"},"Understanding errors"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'GET /gb/tweet/_validate/query?explain\n{\n    "query": {\n        "tweet": {\n            "match": "really powerful"\n        }\n    }\n}\n\nResponse\n{\n    "valid": false,\n    "_shards": {...},\n    "explanations: [{\n        "index": "gb",\n        "valid": false,\n        "error": "org.elasticsearch.index.query.QueryParsingException: [gb] No query registered for [tweet]"\n    }]\n}\n')),(0,l.yg)("h2",{id:"understanding-queries"},"Understanding Queries"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"For understanding how query is interpreted by ES")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'GET /_validate/query?explain\nBody: {\n    "query": {\n        "match": {\n            "tweet": "really powerful"\n        }\n    }\n}\nResponse: {\n    "valid": true,\n    "_shards": { ... },\n    "explanations": [\n        {\n            "index": "us",\n            "valid": true,\n            "explanation": "tweet: really tweet:powerful"\n        }, {\n            "index": "gb",\n            "valid": true,\n            "explanation": "tweet:realli tweet:power"\n        }\n    ]\n}\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Shows how the terms are re-written")))}c.isMDXComponent=!0}}]);